// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `feoblog.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Item {
    // message fields
    pub timestamp_ms_utc: i64,
    pub utc_offset_minutes: i32,
    // message oneof groups
    pub item_type: ::std::option::Option<Item_oneof_item_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Item {
    fn default() -> &'a Item {
        <Item as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Item_oneof_item_type {
    post(Post),
    profile(Profile),
    comment(Comment),
}

impl Item {
    pub fn new() -> Item {
        ::std::default::Default::default()
    }

    // int64 timestamp_ms_utc = 1;


    pub fn get_timestamp_ms_utc(&self) -> i64 {
        self.timestamp_ms_utc
    }
    pub fn clear_timestamp_ms_utc(&mut self) {
        self.timestamp_ms_utc = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_ms_utc(&mut self, v: i64) {
        self.timestamp_ms_utc = v;
    }

    // sint32 utc_offset_minutes = 2;


    pub fn get_utc_offset_minutes(&self) -> i32 {
        self.utc_offset_minutes
    }
    pub fn clear_utc_offset_minutes(&mut self) {
        self.utc_offset_minutes = 0;
    }

    // Param is passed by value, moved
    pub fn set_utc_offset_minutes(&mut self, v: i32) {
        self.utc_offset_minutes = v;
    }

    // .Post post = 3;


    pub fn get_post(&self) -> &Post {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::post(ref v)) => v,
            _ => <Post as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_post(&mut self) {
        self.item_type = ::std::option::Option::None;
    }

    pub fn has_post(&self) -> bool {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::post(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: Post) {
        self.item_type = ::std::option::Option::Some(Item_oneof_item_type::post(v))
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut Post {
        if let ::std::option::Option::Some(Item_oneof_item_type::post(_)) = self.item_type {
        } else {
            self.item_type = ::std::option::Option::Some(Item_oneof_item_type::post(Post::new()));
        }
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::post(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_post(&mut self) -> Post {
        if self.has_post() {
            match self.item_type.take() {
                ::std::option::Option::Some(Item_oneof_item_type::post(v)) => v,
                _ => panic!(),
            }
        } else {
            Post::new()
        }
    }

    // .Profile profile = 4;


    pub fn get_profile(&self) -> &Profile {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::profile(ref v)) => v,
            _ => <Profile as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_profile(&mut self) {
        self.item_type = ::std::option::Option::None;
    }

    pub fn has_profile(&self) -> bool {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::profile(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_profile(&mut self, v: Profile) {
        self.item_type = ::std::option::Option::Some(Item_oneof_item_type::profile(v))
    }

    // Mutable pointer to the field.
    pub fn mut_profile(&mut self) -> &mut Profile {
        if let ::std::option::Option::Some(Item_oneof_item_type::profile(_)) = self.item_type {
        } else {
            self.item_type = ::std::option::Option::Some(Item_oneof_item_type::profile(Profile::new()));
        }
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::profile(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_profile(&mut self) -> Profile {
        if self.has_profile() {
            match self.item_type.take() {
                ::std::option::Option::Some(Item_oneof_item_type::profile(v)) => v,
                _ => panic!(),
            }
        } else {
            Profile::new()
        }
    }

    // .Comment comment = 5;


    pub fn get_comment(&self) -> &Comment {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::comment(ref v)) => v,
            _ => <Comment as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_comment(&mut self) {
        self.item_type = ::std::option::Option::None;
    }

    pub fn has_comment(&self) -> bool {
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::comment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: Comment) {
        self.item_type = ::std::option::Option::Some(Item_oneof_item_type::comment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_comment(&mut self) -> &mut Comment {
        if let ::std::option::Option::Some(Item_oneof_item_type::comment(_)) = self.item_type {
        } else {
            self.item_type = ::std::option::Option::Some(Item_oneof_item_type::comment(Comment::new()));
        }
        match self.item_type {
            ::std::option::Option::Some(Item_oneof_item_type::comment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_comment(&mut self) -> Comment {
        if self.has_comment() {
            match self.item_type.take() {
                ::std::option::Option::Some(Item_oneof_item_type::comment(v)) => v,
                _ => panic!(),
            }
        } else {
            Comment::new()
        }
    }
}

impl ::protobuf::Message for Item {
    fn is_initialized(&self) -> bool {
        if let Some(Item_oneof_item_type::post(ref v)) = self.item_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Item_oneof_item_type::profile(ref v)) = self.item_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Item_oneof_item_type::comment(ref v)) = self.item_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp_ms_utc = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.utc_offset_minutes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item_type = ::std::option::Option::Some(Item_oneof_item_type::post(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item_type = ::std::option::Option::Some(Item_oneof_item_type::profile(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item_type = ::std::option::Option::Some(Item_oneof_item_type::comment(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp_ms_utc != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp_ms_utc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.utc_offset_minutes != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.utc_offset_minutes);
        }
        if let ::std::option::Option::Some(ref v) = self.item_type {
            match v {
                &Item_oneof_item_type::post(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Item_oneof_item_type::profile(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Item_oneof_item_type::comment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp_ms_utc != 0 {
            os.write_int64(1, self.timestamp_ms_utc)?;
        }
        if self.utc_offset_minutes != 0 {
            os.write_sint32(2, self.utc_offset_minutes)?;
        }
        if let ::std::option::Option::Some(ref v) = self.item_type {
            match v {
                &Item_oneof_item_type::post(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Item_oneof_item_type::profile(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Item_oneof_item_type::comment(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Item {
        Item::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp_ms_utc",
                |m: &Item| { &m.timestamp_ms_utc },
                |m: &mut Item| { &mut m.timestamp_ms_utc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "utc_offset_minutes",
                |m: &Item| { &m.utc_offset_minutes },
                |m: &mut Item| { &mut m.utc_offset_minutes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Post>(
                "post",
                Item::has_post,
                Item::get_post,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Profile>(
                "profile",
                Item::has_profile,
                Item::get_profile,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Comment>(
                "comment",
                Item::has_comment,
                Item::get_comment,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Item>(
                "Item",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Item {
        static instance: ::protobuf::rt::LazyV2<Item> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Item::new)
    }
}

impl ::protobuf::Clear for Item {
    fn clear(&mut self) {
        self.timestamp_ms_utc = 0;
        self.utc_offset_minutes = 0;
        self.item_type = ::std::option::Option::None;
        self.item_type = ::std::option::Option::None;
        self.item_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Item {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Post {
    // message fields
    pub title: ::std::string::String,
    pub body: ::std::string::String,
    pub attachments: ::protobuf::SingularPtrField<Attachments>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Post {
    fn default() -> &'a Post {
        <Post as ::protobuf::Message>::default_instance()
    }
}

impl Post {
    pub fn new() -> Post {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string body = 2;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // .Attachments attachments = 5;


    pub fn get_attachments(&self) -> &Attachments {
        self.attachments.as_ref().unwrap_or_else(|| <Attachments as ::protobuf::Message>::default_instance())
    }
    pub fn clear_attachments(&mut self) {
        self.attachments.clear();
    }

    pub fn has_attachments(&self) -> bool {
        self.attachments.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attachments(&mut self, v: Attachments) {
        self.attachments = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attachments(&mut self) -> &mut Attachments {
        if self.attachments.is_none() {
            self.attachments.set_default();
        }
        self.attachments.as_mut().unwrap()
    }

    // Take field
    pub fn take_attachments(&mut self) -> Attachments {
        self.attachments.take().unwrap_or_else(|| Attachments::new())
    }
}

impl ::protobuf::Message for Post {
    fn is_initialized(&self) -> bool {
        for v in &self.attachments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.attachments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.body);
        }
        if let Some(ref v) = self.attachments.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.body.is_empty() {
            os.write_string(2, &self.body)?;
        }
        if let Some(ref v) = self.attachments.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Post {
        Post::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Post| { &m.title },
                |m: &mut Post| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &Post| { &m.body },
                |m: &mut Post| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Attachments>>(
                "attachments",
                |m: &Post| { &m.attachments },
                |m: &mut Post| { &mut m.attachments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Post>(
                "Post",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Post {
        static instance: ::protobuf::rt::LazyV2<Post> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Post::new)
    }
}

impl ::protobuf::Clear for Post {
    fn clear(&mut self) {
        self.title.clear();
        self.body.clear();
        self.attachments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Post {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Post {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Profile {
    // message fields
    pub display_name: ::std::string::String,
    pub about: ::std::string::String,
    pub servers: ::protobuf::RepeatedField<Server>,
    pub follows: ::protobuf::RepeatedField<Follow>,
    pub follow_groups: ::protobuf::RepeatedField<FollowGroup>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    // string display_name = 1;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string about = 2;


    pub fn get_about(&self) -> &str {
        &self.about
    }
    pub fn clear_about(&mut self) {
        self.about.clear();
    }

    // Param is passed by value, moved
    pub fn set_about(&mut self, v: ::std::string::String) {
        self.about = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_about(&mut self) -> &mut ::std::string::String {
        &mut self.about
    }

    // Take field
    pub fn take_about(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.about, ::std::string::String::new())
    }

    // repeated .Server servers = 3;


    pub fn get_servers(&self) -> &[Server] {
        &self.servers
    }
    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::protobuf::RepeatedField<Server>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::protobuf::RepeatedField<Server> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::protobuf::RepeatedField<Server> {
        ::std::mem::replace(&mut self.servers, ::protobuf::RepeatedField::new())
    }

    // repeated .Follow follows = 4;


    pub fn get_follows(&self) -> &[Follow] {
        &self.follows
    }
    pub fn clear_follows(&mut self) {
        self.follows.clear();
    }

    // Param is passed by value, moved
    pub fn set_follows(&mut self, v: ::protobuf::RepeatedField<Follow>) {
        self.follows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_follows(&mut self) -> &mut ::protobuf::RepeatedField<Follow> {
        &mut self.follows
    }

    // Take field
    pub fn take_follows(&mut self) -> ::protobuf::RepeatedField<Follow> {
        ::std::mem::replace(&mut self.follows, ::protobuf::RepeatedField::new())
    }

    // repeated .FollowGroup follow_groups = 5;


    pub fn get_follow_groups(&self) -> &[FollowGroup] {
        &self.follow_groups
    }
    pub fn clear_follow_groups(&mut self) {
        self.follow_groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_follow_groups(&mut self, v: ::protobuf::RepeatedField<FollowGroup>) {
        self.follow_groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_follow_groups(&mut self) -> &mut ::protobuf::RepeatedField<FollowGroup> {
        &mut self.follow_groups
    }

    // Take field
    pub fn take_follow_groups(&mut self) -> ::protobuf::RepeatedField<FollowGroup> {
        ::std::mem::replace(&mut self.follow_groups, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Profile {
    fn is_initialized(&self) -> bool {
        for v in &self.servers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.follows {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.follow_groups {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.about)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.servers)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.follows)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.follow_groups)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if !self.about.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.about);
        }
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.follows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.follow_groups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if !self.about.is_empty() {
            os.write_string(2, &self.about)?;
        }
        for v in &self.servers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.follows {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.follow_groups {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Profile| { &m.display_name },
                |m: &mut Profile| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "about",
                |m: &Profile| { &m.about },
                |m: &mut Profile| { &mut m.about },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Server>>(
                "servers",
                |m: &Profile| { &m.servers },
                |m: &mut Profile| { &mut m.servers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Follow>>(
                "follows",
                |m: &Profile| { &m.follows },
                |m: &mut Profile| { &mut m.follows },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FollowGroup>>(
                "follow_groups",
                |m: &Profile| { &m.follow_groups },
                |m: &mut Profile| { &mut m.follow_groups },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Profile>(
                "Profile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Profile {
        static instance: ::protobuf::rt::LazyV2<Profile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Profile::new)
    }
}

impl ::protobuf::Clear for Profile {
    fn clear(&mut self) {
        self.display_name.clear();
        self.about.clear();
        self.servers.clear();
        self.follows.clear();
        self.follow_groups.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Comment {
    // message fields
    pub reply_to: ::protobuf::SingularPtrField<ReplyRef>,
    pub text: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Comment {
    fn default() -> &'a Comment {
        <Comment as ::protobuf::Message>::default_instance()
    }
}

impl Comment {
    pub fn new() -> Comment {
        ::std::default::Default::default()
    }

    // .ReplyRef reply_to = 1;


    pub fn get_reply_to(&self) -> &ReplyRef {
        self.reply_to.as_ref().unwrap_or_else(|| <ReplyRef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reply_to(&mut self) {
        self.reply_to.clear();
    }

    pub fn has_reply_to(&self) -> bool {
        self.reply_to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reply_to(&mut self, v: ReplyRef) {
        self.reply_to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply_to(&mut self) -> &mut ReplyRef {
        if self.reply_to.is_none() {
            self.reply_to.set_default();
        }
        self.reply_to.as_mut().unwrap()
    }

    // Take field
    pub fn take_reply_to(&mut self) -> ReplyRef {
        self.reply_to.take().unwrap_or_else(|| ReplyRef::new())
    }

    // string text = 2;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Comment {
    fn is_initialized(&self) -> bool {
        for v in &self.reply_to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reply_to)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.reply_to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.reply_to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Comment {
        Comment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReplyRef>>(
                "reply_to",
                |m: &Comment| { &m.reply_to },
                |m: &mut Comment| { &mut m.reply_to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &Comment| { &m.text },
                |m: &mut Comment| { &mut m.text },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Comment>(
                "Comment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Comment {
        static instance: ::protobuf::rt::LazyV2<Comment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Comment::new)
    }
}

impl ::protobuf::Clear for Comment {
    fn clear(&mut self) {
        self.reply_to.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Comment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Comment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ReplyRef {
    // message fields
    pub user_id: ::protobuf::SingularPtrField<UserID>,
    pub signature: ::protobuf::SingularPtrField<Signature>,
    pub item_type: ItemType,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplyRef {
    fn default() -> &'a ReplyRef {
        <ReplyRef as ::protobuf::Message>::default_instance()
    }
}

impl ReplyRef {
    pub fn new() -> ReplyRef {
        ::std::default::Default::default()
    }

    // .UserID user_id = 1;


    pub fn get_user_id(&self) -> &UserID {
        self.user_id.as_ref().unwrap_or_else(|| <UserID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: UserID) {
        self.user_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_id(&mut self) -> &mut UserID {
        if self.user_id.is_none() {
            self.user_id.set_default();
        }
        self.user_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_id(&mut self) -> UserID {
        self.user_id.take().unwrap_or_else(|| UserID::new())
    }

    // .Signature signature = 2;


    pub fn get_signature(&self) -> &Signature {
        self.signature.as_ref().unwrap_or_else(|| <Signature as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: Signature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut Signature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> Signature {
        self.signature.take().unwrap_or_else(|| Signature::new())
    }

    // .ItemType item_type = 3;


    pub fn get_item_type(&self) -> ItemType {
        self.item_type
    }
    pub fn clear_item_type(&mut self) {
        self.item_type = ItemType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_item_type(&mut self, v: ItemType) {
        self.item_type = v;
    }
}

impl ::protobuf::Message for ReplyRef {
    fn is_initialized(&self) -> bool {
        for v in &self.user_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.item_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.item_type != ItemType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.item_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.item_type != ItemType::UNKNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.item_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplyRef {
        ReplyRef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserID>>(
                "user_id",
                |m: &ReplyRef| { &m.user_id },
                |m: &mut ReplyRef| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Signature>>(
                "signature",
                |m: &ReplyRef| { &m.signature },
                |m: &mut ReplyRef| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ItemType>>(
                "item_type",
                |m: &ReplyRef| { &m.item_type },
                |m: &mut ReplyRef| { &mut m.item_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReplyRef>(
                "ReplyRef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReplyRef {
        static instance: ::protobuf::rt::LazyV2<ReplyRef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReplyRef::new)
    }
}

impl ::protobuf::Clear for ReplyRef {
    fn clear(&mut self) {
        self.user_id.clear();
        self.signature.clear();
        self.item_type = ItemType::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReplyRef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplyRef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Server {
    // message fields
    pub url: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server {
    fn default() -> &'a Server {
        <Server as ::protobuf::Message>::default_instance()
    }
}

impl Server {
    pub fn new() -> Server {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Server {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server {
        Server::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &Server| { &m.url },
                |m: &mut Server| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server>(
                "Server",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server {
        static instance: ::protobuf::rt::LazyV2<Server> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server::new)
    }
}

impl ::protobuf::Clear for Server {
    fn clear(&mut self) {
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Follow {
    // message fields
    pub user: ::protobuf::SingularPtrField<UserID>,
    pub display_name: ::std::string::String,
    // message oneof groups
    pub _follow_group: ::std::option::Option<Follow_oneof__follow_group>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Follow {
    fn default() -> &'a Follow {
        <Follow as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Follow_oneof__follow_group {
    follow_group(i32),
}

impl Follow {
    pub fn new() -> Follow {
        ::std::default::Default::default()
    }

    // .UserID user = 1;


    pub fn get_user(&self) -> &UserID {
        self.user.as_ref().unwrap_or_else(|| <UserID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: UserID) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut UserID {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> UserID {
        self.user.take().unwrap_or_else(|| UserID::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // int32 follow_group = 3;


    pub fn get_follow_group(&self) -> i32 {
        match self._follow_group {
            ::std::option::Option::Some(Follow_oneof__follow_group::follow_group(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_follow_group(&mut self) {
        self._follow_group = ::std::option::Option::None;
    }

    pub fn has_follow_group(&self) -> bool {
        match self._follow_group {
            ::std::option::Option::Some(Follow_oneof__follow_group::follow_group(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_follow_group(&mut self, v: i32) {
        self._follow_group = ::std::option::Option::Some(Follow_oneof__follow_group::follow_group(v))
    }
}

impl ::protobuf::Message for Follow {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._follow_group = ::std::option::Option::Some(Follow_oneof__follow_group::follow_group(is.read_int32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if let ::std::option::Option::Some(ref v) = self._follow_group {
            match v {
                &Follow_oneof__follow_group::follow_group(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self._follow_group {
            match v {
                &Follow_oneof__follow_group::follow_group(v) => {
                    os.write_int32(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Follow {
        Follow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserID>>(
                "user",
                |m: &Follow| { &m.user },
                |m: &mut Follow| { &mut m.user },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Follow| { &m.display_name },
                |m: &mut Follow| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "follow_group",
                Follow::has_follow_group,
                Follow::get_follow_group,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Follow>(
                "Follow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Follow {
        static instance: ::protobuf::rt::LazyV2<Follow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Follow::new)
    }
}

impl ::protobuf::Clear for Follow {
    fn clear(&mut self) {
        self.user.clear();
        self.display_name.clear();
        self._follow_group = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Follow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Follow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FollowGroup {
    // message fields
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FollowGroup {
    fn default() -> &'a FollowGroup {
        <FollowGroup as ::protobuf::Message>::default_instance()
    }
}

impl FollowGroup {
    pub fn new() -> FollowGroup {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FollowGroup {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FollowGroup {
        FollowGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FollowGroup| { &m.name },
                |m: &mut FollowGroup| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FollowGroup>(
                "FollowGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FollowGroup {
        static instance: ::protobuf::rt::LazyV2<FollowGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FollowGroup::new)
    }
}

impl ::protobuf::Clear for FollowGroup {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FollowGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FollowGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UserID {
    // message fields
    pub bytes: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserID {
    fn default() -> &'a UserID {
        <UserID as ::protobuf::Message>::default_instance()
    }
}

impl UserID {
    pub fn new() -> UserID {
        ::std::default::Default::default()
    }

    // bytes bytes = 1;


    pub fn get_bytes(&self) -> &[u8] {
        &self.bytes
    }
    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UserID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bytes.is_empty() {
            os.write_bytes(1, &self.bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserID {
        UserID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bytes",
                |m: &UserID| { &m.bytes },
                |m: &mut UserID| { &mut m.bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserID>(
                "UserID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserID {
        static instance: ::protobuf::rt::LazyV2<UserID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserID::new)
    }
}

impl ::protobuf::Clear for UserID {
    fn clear(&mut self) {
        self.bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Signature {
    // message fields
    pub bytes: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Signature {
    fn default() -> &'a Signature {
        <Signature as ::protobuf::Message>::default_instance()
    }
}

impl Signature {
    pub fn new() -> Signature {
        ::std::default::Default::default()
    }

    // bytes bytes = 1;


    pub fn get_bytes(&self) -> &[u8] {
        &self.bytes
    }
    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Signature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bytes.is_empty() {
            os.write_bytes(1, &self.bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Signature {
        Signature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bytes",
                |m: &Signature| { &m.bytes },
                |m: &mut Signature| { &mut m.bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Signature>(
                "Signature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Signature {
        static instance: ::protobuf::rt::LazyV2<Signature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Signature::new)
    }
}

impl ::protobuf::Clear for Signature {
    fn clear(&mut self) {
        self.bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ItemList {
    // message fields
    pub items: ::protobuf::RepeatedField<ItemListEntry>,
    pub no_more_items: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ItemList {
    fn default() -> &'a ItemList {
        <ItemList as ::protobuf::Message>::default_instance()
    }
}

impl ItemList {
    pub fn new() -> ItemList {
        ::std::default::Default::default()
    }

    // repeated .ItemListEntry items = 1;


    pub fn get_items(&self) -> &[ItemListEntry] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<ItemListEntry>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<ItemListEntry> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<ItemListEntry> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }

    // bool no_more_items = 2;


    pub fn get_no_more_items(&self) -> bool {
        self.no_more_items
    }
    pub fn clear_no_more_items(&mut self) {
        self.no_more_items = false;
    }

    // Param is passed by value, moved
    pub fn set_no_more_items(&mut self, v: bool) {
        self.no_more_items = v;
    }
}

impl ::protobuf::Message for ItemList {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_more_items = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.no_more_items != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.no_more_items != false {
            os.write_bool(2, self.no_more_items)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ItemList {
        ItemList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ItemListEntry>>(
                "items",
                |m: &ItemList| { &m.items },
                |m: &mut ItemList| { &mut m.items },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_more_items",
                |m: &ItemList| { &m.no_more_items },
                |m: &mut ItemList| { &mut m.no_more_items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ItemList>(
                "ItemList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ItemList {
        static instance: ::protobuf::rt::LazyV2<ItemList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ItemList::new)
    }
}

impl ::protobuf::Clear for ItemList {
    fn clear(&mut self) {
        self.items.clear();
        self.no_more_items = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ItemList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ItemListEntry {
    // message fields
    pub user_id: ::protobuf::SingularPtrField<UserID>,
    pub signature: ::protobuf::SingularPtrField<Signature>,
    pub timestamp_ms_utc: i64,
    pub item_type: ItemType,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ItemListEntry {
    fn default() -> &'a ItemListEntry {
        <ItemListEntry as ::protobuf::Message>::default_instance()
    }
}

impl ItemListEntry {
    pub fn new() -> ItemListEntry {
        ::std::default::Default::default()
    }

    // .UserID user_id = 1;


    pub fn get_user_id(&self) -> &UserID {
        self.user_id.as_ref().unwrap_or_else(|| <UserID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: UserID) {
        self.user_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_id(&mut self) -> &mut UserID {
        if self.user_id.is_none() {
            self.user_id.set_default();
        }
        self.user_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_id(&mut self) -> UserID {
        self.user_id.take().unwrap_or_else(|| UserID::new())
    }

    // .Signature signature = 2;


    pub fn get_signature(&self) -> &Signature {
        self.signature.as_ref().unwrap_or_else(|| <Signature as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: Signature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut Signature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> Signature {
        self.signature.take().unwrap_or_else(|| Signature::new())
    }

    // int64 timestamp_ms_utc = 3;


    pub fn get_timestamp_ms_utc(&self) -> i64 {
        self.timestamp_ms_utc
    }
    pub fn clear_timestamp_ms_utc(&mut self) {
        self.timestamp_ms_utc = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_ms_utc(&mut self, v: i64) {
        self.timestamp_ms_utc = v;
    }

    // .ItemType item_type = 4;


    pub fn get_item_type(&self) -> ItemType {
        self.item_type
    }
    pub fn clear_item_type(&mut self) {
        self.item_type = ItemType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_item_type(&mut self, v: ItemType) {
        self.item_type = v;
    }
}

impl ::protobuf::Message for ItemListEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.user_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp_ms_utc = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.item_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timestamp_ms_utc != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp_ms_utc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.item_type != ItemType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.item_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timestamp_ms_utc != 0 {
            os.write_int64(3, self.timestamp_ms_utc)?;
        }
        if self.item_type != ItemType::UNKNOWN {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.item_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ItemListEntry {
        ItemListEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserID>>(
                "user_id",
                |m: &ItemListEntry| { &m.user_id },
                |m: &mut ItemListEntry| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Signature>>(
                "signature",
                |m: &ItemListEntry| { &m.signature },
                |m: &mut ItemListEntry| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp_ms_utc",
                |m: &ItemListEntry| { &m.timestamp_ms_utc },
                |m: &mut ItemListEntry| { &mut m.timestamp_ms_utc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ItemType>>(
                "item_type",
                |m: &ItemListEntry| { &m.item_type },
                |m: &mut ItemListEntry| { &mut m.item_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ItemListEntry>(
                "ItemListEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ItemListEntry {
        static instance: ::protobuf::rt::LazyV2<ItemListEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ItemListEntry::new)
    }
}

impl ::protobuf::Clear for ItemListEntry {
    fn clear(&mut self) {
        self.user_id.clear();
        self.signature.clear();
        self.timestamp_ms_utc = 0;
        self.item_type = ItemType::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ItemListEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemListEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Attachments {
    // message fields
    pub file: ::protobuf::RepeatedField<File>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Attachments {
    fn default() -> &'a Attachments {
        <Attachments as ::protobuf::Message>::default_instance()
    }
}

impl Attachments {
    pub fn new() -> Attachments {
        ::std::default::Default::default()
    }

    // repeated .File file = 1;


    pub fn get_file(&self) -> &[File] {
        &self.file
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.file
    }

    // Take field
    pub fn take_file(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.file, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Attachments {
    fn is_initialized(&self) -> bool {
        for v in &self.file {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.file {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.file {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Attachments {
        Attachments::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<File>>(
                "file",
                |m: &Attachments| { &m.file },
                |m: &mut Attachments| { &mut m.file },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Attachments>(
                "Attachments",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Attachments {
        static instance: ::protobuf::rt::LazyV2<Attachments> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Attachments::new)
    }
}

impl ::protobuf::Clear for Attachments {
    fn clear(&mut self) {
        self.file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Attachments {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attachments {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct File {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub size: u64,
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a File {
    fn default() -> &'a File {
        <File as ::protobuf::Message>::default_instance()
    }
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // uint64 size = 2;


    pub fn get_size(&self) -> u64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u64) {
        self.size = v;
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.size != 0 {
            os.write_uint64(2, self.size)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> File {
        File::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &File| { &m.hash },
                |m: &mut File| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "size",
                |m: &File| { &m.size },
                |m: &mut File| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &File| { &m.name },
                |m: &mut File| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<File>(
                "File",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static File {
        static instance: ::protobuf::rt::LazyV2<File> = ::protobuf::rt::LazyV2::INIT;
        instance.get(File::new)
    }
}

impl ::protobuf::Clear for File {
    fn clear(&mut self) {
        self.hash.clear();
        self.size = 0;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for File {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ItemType {
    UNKNOWN = 0,
    POST = 1,
    PROFILE = 2,
    COMMENT = 3,
}

impl ::protobuf::ProtobufEnum for ItemType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ItemType> {
        match value {
            0 => ::std::option::Option::Some(ItemType::UNKNOWN),
            1 => ::std::option::Option::Some(ItemType::POST),
            2 => ::std::option::Option::Some(ItemType::PROFILE),
            3 => ::std::option::Option::Some(ItemType::COMMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ItemType] = &[
            ItemType::UNKNOWN,
            ItemType::POST,
            ItemType::PROFILE,
            ItemType::COMMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ItemType>("ItemType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ItemType {
}

impl ::std::default::Default for ItemType {
    fn default() -> Self {
        ItemType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rfeoblog.proto\"\xd4\x01\n\x04Item\x12(\n\x10timestamp_ms_utc\x18\x01\
    \x20\x01(\x03R\x0etimestampMsUtc\x12,\n\x12utc_offset_minutes\x18\x02\
    \x20\x01(\x11R\x10utcOffsetMinutes\x12\x1b\n\x04post\x18\x03\x20\x01(\
    \x0b2\x05.PostH\0R\x04post\x12$\n\x07profile\x18\x04\x20\x01(\x0b2\x08.P\
    rofileH\0R\x07profile\x12$\n\x07comment\x18\x05\x20\x01(\x0b2\x08.Commen\
    tH\0R\x07commentB\x0b\n\titem_type\"`\n\x04Post\x12\x14\n\x05title\x18\
    \x01\x20\x01(\tR\x05title\x12\x12\n\x04body\x18\x02\x20\x01(\tR\x04body\
    \x12.\n\x0battachments\x18\x05\x20\x01(\x0b2\x0c.AttachmentsR\x0battachm\
    ents\"\xbb\x01\n\x07Profile\x12!\n\x0cdisplay_name\x18\x01\x20\x01(\tR\
    \x0bdisplayName\x12\x14\n\x05about\x18\x02\x20\x01(\tR\x05about\x12!\n\
    \x07servers\x18\x03\x20\x03(\x0b2\x07.ServerR\x07servers\x12!\n\x07follo\
    ws\x18\x04\x20\x03(\x0b2\x07.FollowR\x07follows\x121\n\rfollow_groups\
    \x18\x05\x20\x03(\x0b2\x0c.FollowGroupR\x0cfollowGroups\"C\n\x07Comment\
    \x12$\n\x08reply_to\x18\x01\x20\x01(\x0b2\t.ReplyRefR\x07replyTo\x12\x12\
    \n\x04text\x18\x02\x20\x01(\tR\x04text\"~\n\x08ReplyRef\x12\x20\n\x07use\
    r_id\x18\x01\x20\x01(\x0b2\x07.UserIDR\x06userId\x12(\n\tsignature\x18\
    \x02\x20\x01(\x0b2\n.SignatureR\tsignature\x12&\n\titem_type\x18\x03\x20\
    \x01(\x0e2\t.ItemTypeR\x08itemType\"\x1a\n\x06Server\x12\x10\n\x03url\
    \x18\x01\x20\x01(\tR\x03url\"\x81\x01\n\x06Follow\x12\x1b\n\x04user\x18\
    \x01\x20\x01(\x0b2\x07.UserIDR\x04user\x12!\n\x0cdisplay_name\x18\x02\
    \x20\x01(\tR\x0bdisplayName\x12&\n\x0cfollow_group\x18\x03\x20\x01(\x05H\
    \0R\x0bfollowGroup\x88\x01\x01B\x0f\n\r_follow_group\"!\n\x0bFollowGroup\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\x1e\n\x06UserID\x12\x14\
    \n\x05bytes\x18\x01\x20\x01(\x0cR\x05bytes\"!\n\tSignature\x12\x14\n\x05\
    bytes\x18\x01\x20\x01(\x0cR\x05bytes\"T\n\x08ItemList\x12$\n\x05items\
    \x18\x01\x20\x03(\x0b2\x0e.ItemListEntryR\x05items\x12\"\n\rno_more_item\
    s\x18\x02\x20\x01(\x08R\x0bnoMoreItems\"\xad\x01\n\rItemListEntry\x12\
    \x20\n\x07user_id\x18\x01\x20\x01(\x0b2\x07.UserIDR\x06userId\x12(\n\tsi\
    gnature\x18\x02\x20\x01(\x0b2\n.SignatureR\tsignature\x12(\n\x10timestam\
    p_ms_utc\x18\x03\x20\x01(\x03R\x0etimestampMsUtc\x12&\n\titem_type\x18\
    \x04\x20\x01(\x0e2\t.ItemTypeR\x08itemType\"(\n\x0bAttachments\x12\x19\n\
    \x04file\x18\x01\x20\x03(\x0b2\x05.FileR\x04file\"B\n\x04File\x12\x12\n\
    \x04hash\x18\x01\x20\x01(\x0cR\x04hash\x12\x12\n\x04size\x18\x02\x20\x01\
    (\x04R\x04size\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name*;\n\x08Item\
    Type\x12\x0b\n\x07UNKNOWN\x10\0\x12\x08\n\x04POST\x10\x01\x12\x0b\n\x07P\
    ROFILE\x10\x02\x12\x0b\n\x07COMMENT\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
